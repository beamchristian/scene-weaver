// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma" // Your existing output path
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(cuid())
  email      String      @unique
  name       String?
  isAdmin    Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  gameStates GameState[] // This is the back-relation for GameState.userId
}

model GameState {
  id           String   @id @default(cuid())
  userId       String   @unique
  currentScore Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  currentNodeId String?
  currentNode   NarrativeNode? @relation("CurrentNode", fields: [currentNodeId], references: [id], onDelete: SetNull)

  startNodeId String?
  startNode   NarrativeNode? @relation("StartNode", fields: [startNodeId], references: [id], onDelete: SetNull)

  // NEW: Add this line for the stateData field
  stateData Json? // Use Json? to allow flexible JSON objects and make it nullable
}

// New model for global game settings
model GameSetting {
  id          String         @id @default(cuid())
  // Use a fixed unique name to ensure there's only one global settings record
  settingName String         @unique // e.g., "global_game_settings"
  startNodeId String?
  // Relation to the NarrativeNode that is the game's entry point
  startNode   NarrativeNode? @relation("GlobalStartNode", fields: [startNodeId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Add the back-relation to NarrativeNode
model NarrativeNode {
  id        String   @id @default(cuid())
  title     String   @unique
  text      String
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  challengeType       String?
  challengeIdInternal String?
  onSuccessNodeId     String?
  onFailureNodeId     String?

  // Choices originating from this node (where this node is the sourceNode)
  choices Choice[]

  // Choices that LEAD to this node (where this node is the nextNode)
  incomingChoices Choice[] @relation("ChoiceOutcome")

  // Back-relations from GameState
  gameStatesAsCurrent GameState[] @relation("CurrentNode")
  gameStatesAsStart   GameState[] @relation("StartNode")

  // NEW: Back-relation for the global start node setting
  gameSettingAsStart GameSetting[] @relation("GlobalStartNode") // <--- ADD THIS LINE
}

model Choice {
  id   String @id @default(cuid())
  text String // Text displayed to the player

  sourceNodeId String
  sourceNode   NarrativeNode @relation(fields: [sourceNodeId], references: [id], onDelete: Cascade) // Choice belongs to a source node

  nextNodeId String
  // Named this relation for clarity, though not strictly required if it's the only one pointing back to NarrativeNode
  nextNode   NarrativeNode @relation("ChoiceOutcome", fields: [nextNodeId], references: [id], onDelete: NoAction, onUpdate: NoAction) // Choice leads to a target node

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sourceNodeId])
  @@index([nextNodeId])
}

// Note: The MiniChallengeType enum/union from src/lib/types.ts
// export type MiniChallengeType = "quick_time_event" | "simple_puzzle" | ...;
// will still be useful for defining allowed values for `challengeType` in the NarrativeNode model
// and for the frontend components.
